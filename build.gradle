buildscript {
    repositories {
        // We may have to manually comment out earlier repos to pull from later ones (disable maven to use github)
        maven {
            name = "MavenCentralSnapshots"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            url = carnivalVersion.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }

        mavenLocal()

        mavenCentral()

    }
    dependencies {
        classpath group:'io.github.carnival-data', name:'carnival-gradle', version:project.findProperty("carnivalVersion")
    }    
}

plugins {
    id "groovy"
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "io.micronaut.application" version '1.0.5'
    id 'com.github.ManifestClasspath' version '0.1.0-RELEASE'
}
apply plugin: 'carnival.application'

version "0.1"
group "io.github.carnival-data"

repositories {
    // We may have to manually comment out earlier repos to pull from later ones (disable maven to use github)
    maven {
        name = "MavenCentralSnapshots"
        def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
        def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
        url = carnivalVersion.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
    }

    mavenLocal()

    mavenCentral()
}

micronaut {
    runtime "netty"
    testRuntime "spock2"
    processing {
        incremental true
        annotations "example.carnival.micronaut.*"
    }
}

dependencies {
//    annotationProcessor "io.micronaut:micronaut-inject-java"

    implementation("io.micronaut:micronaut-validation")
    implementation("io.micronaut.groovy:micronaut-runtime-groovy")
    implementation("javax.annotation:javax.annotation-api")
    implementation("io.micronaut:micronaut-http-client")
    runtimeOnly("ch.qos.logback:logback-classic")

//    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
}

mainClassName = "example.carnival.micronaut.Application"
java {
    sourceCompatibility = JavaVersion.toVersion('11')
    targetCompatibility = JavaVersion.toVersion('11')
}

test {
    testLogging {
        outputs.upToDateWhen {false}
        showStandardStreams = true
    }
}

groovydoc {
    classpath = sourceSets.main.runtimeClasspath + classpath
}

shadowJar {
  zip64 true
}
