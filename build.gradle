buildscript {
    repositories {
        maven {
            name = "MavenCentralSnapshots"
            url 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
        }
        mavenCentral()
        // maven {
        //     name = "GitHubPackages"
        //     url = uri("https://maven.pkg.github.com/carnival-data/carnival")
        //     credentials {
        //         username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_USER")
        //         password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
        //     }
        // }
        mavenLocal()
    }
    dependencies {
        classpath group:'io.github.carnival-data', name:'carnival-gradle', version:'2.1.4-SNAPSHOT'
    }    
}

plugins {
    id "groovy"
    id "com.github.johnrengelman.shadow" version "7.0.0"
    id "io.micronaut.application" version '1.0.5'
    id 'com.github.ManifestClasspath' version '0.1.0-RELEASE'
}
apply plugin: 'carnival.application'

version "0.1"
group "org.carnival"

repositories {
    maven {
        name = "MavenCentralSnapshots"
        url 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
    }
    mavenCentral()
    // maven {
    //     name = "GitHubPackages"
    //     url = uri("https://maven.pkg.github.com/carnival-data/carnival")
    //     credentials {
    //         username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_USER")
    //         password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
    //     }
    // }
}

micronaut {
    runtime "netty"
    testRuntime "spock2"
    processing {
        incremental true
        annotations "example.carnival.micronaut.*"
    }
}

dependencies {
    implementation("io.micronaut:micronaut-validation")
    implementation("io.micronaut.groovy:micronaut-runtime-groovy")
    implementation("javax.annotation:javax.annotation-api")
    implementation("io.micronaut:micronaut-http-client")
    runtimeOnly("ch.qos.logback:logback-classic")
}

mainClassName = "example.carnival.micronaut.Application"
java {
    sourceCompatibility = JavaVersion.toVersion('11')
    targetCompatibility = JavaVersion.toVersion('11')
}

test {
    testLogging {
        outputs.upToDateWhen {false}
        showStandardStreams = true
    }
}

groovydoc {
    classpath = sourceSets.main.runtimeClasspath + classpath
}

shadowJar {
  zip64 true
}